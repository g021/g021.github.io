<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>模拟器运行instantRunSplitApkResourcesDebug报错</title>
    <url>/2020/02/13/android/%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%90%E8%A1%8CinstantRunSplitApkResourcesDebug%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>android应用模拟器运行里提示<code>/app/build/intermediates/instant_run_split_apk_resources/debug/instantRunSplitApkResourcesDebug/out/slice_1/resources_ap</code>报错，解决方法：</p>
<p>依次打开<br>Preferences | Build, Execution, Deployment | Instant Run</p>
<p>不勾选<br>Enable Instant Run to hot swap code/resource changes on deploy(default enabled)</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>在shell中执行一个字符串</title>
    <url>/2020/02/10/develop/%E5%9C%A8shell%E4%B8%AD%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>写shell脚本时经常会拼接一个字串,然后当成命令执行，用到的linux命令是<code>eval ${str}</code>或者<code>echo ${str} | sh</code>，例子如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">start=1</span><br><span class="line">amount=<span class="variable">$1</span></span><br><span class="line">raceId=<span class="variable">$2</span></span><br><span class="line">api_host=127.0.0.1:8080</span><br><span class="line">str=<span class="string">"curl --location --request POST 'http://<span class="variable">$&#123;api_host&#125;</span>/api/AddBuy'</span></span><br><span class="line"><span class="string">--header \"'Content-Type':'application/json'\"</span></span><br><span class="line"><span class="string">--data-raw '&#123;</span></span><br><span class="line"><span class="string">    \"PidStart\":<span class="variable">$start</span>,</span></span><br><span class="line"><span class="string">    \"Amount\":<span class="variable">$&#123;amount&#125;</span>,</span></span><br><span class="line"><span class="string">    \"RaceId\":<span class="variable">$&#123;raceId&#125;</span></span></span><br><span class="line"><span class="string">&#125;'"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str&#125;</span> | sh</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$&#123;str&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>github多帐号添加ssh公钥</title>
    <url>/2020/02/10/develop/github%E5%A4%9A%E5%B8%90%E5%8F%B7%E6%B7%BB%E5%8A%A0SSH%E5%85%AC%E9%92%A5/</url>
    <content><![CDATA[<p>github有两个账号，但是同一个ssh公钥只能添加给一个账号，需要再生成一个密匙后添加。步骤如下：</p>
<h2 id="再添加一个ssh密匙"><a href="#再添加一个ssh密匙" class="headerlink" title="再添加一个ssh密匙"></a>再添加一个ssh密匙</h2><p>1、指定邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure>

<p>2、提示输入生成位置和文件名，取个不同的名称。如: /Users/you/.ssh/id_rsa1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> swhich to save the key (/Users/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>3、输入密码，不用设置，一路回车到完成，生成的文件为：<code>/Users/you/.ssh/id_rsa1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again: </span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:HlteuP6zblxHGjEFh9hLohazijWnxO/aJx0zimpy0lY your_email@example.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|              ++.|</span></span><br><span class="line"><span class="string">|           o oo+.|</span></span><br><span class="line"><span class="string">|        .   = ooo|</span></span><br><span class="line"><span class="string">|         = *  ...|</span></span><br><span class="line"><span class="string">|        S X .  + |</span></span><br><span class="line"><span class="string">|       o E + +o .|</span></span><br><span class="line"><span class="string">|      . + =.o.+. |</span></span><br><span class="line"><span class="string">|     o = o =+o   |</span></span><br><span class="line"><span class="string">|      *.. o=Bo   |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<h2 id="生成的ssh公钥添加到github"><a href="#生成的ssh公钥添加到github" class="headerlink" title="生成的ssh公钥添加到github"></a>生成的ssh公钥添加到github</h2><p>复制出生成的ssh公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pbcopy &lt; /Users/you/.ssh/id_rsa1.pub</span><br></pre></td></tr></table></figure>

<p>github网站setting的SSH and GPG keys新建一个key粘进去</p>
<h2 id="ssh-config文件里添加一个host"><a href="#ssh-config文件里添加一个host" class="headerlink" title="ssh config文件里添加一个host"></a>ssh config文件里添加一个host</h2><p>ssh目录没config文件，新建一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host github1</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa1</span><br></pre></td></tr></table></figure>

<h2 id="修改仓库地址"><a href="#修改仓库地址" class="headerlink" title="修改仓库地址"></a>修改仓库地址</h2><p>第二个账号的git地址中<code>git@github.com</code>都改为<code>github1</code>，如：<code>git@github.com:you/your-repo.git</code>变为<code>github1:you/your-repo.git</code></p>
<p>添加仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin github1:you/your-repo.git</span><br></pre></td></tr></table></figure>

<p>修改仓库地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin github1:you/your-repo.git</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>js防抖和节流</title>
    <url>/2020/02/10/frontend/js%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<p>防抖和节流在前端性能优化中很常用，防抖和节流都是对一段时间内事件触发函数执行频率的控制；使用场景就是当频繁事件时怎样去处理函数执行。</p>
<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>在限定时间内，如果事件再次触发，丢弃当前已响应的函数执行，以当前事件响应函数重新计时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    wait = wait || <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">            fn.apply(that, args);</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight javascript"><figcaption><span>_.debounce</span><a href="https://github.com/jashkenas/underscore/blob/master/underscore.js" target="_blank" rel="noopener">Underscore.js</a></figcaption><table><tr><td class="code"><pre><span class="line">_.debounce = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> timeout, result;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params">context, args</span>) </span>&#123;</span><br><span class="line">     timeout = <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (args) result = func.apply(context, args);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> debounced = restArguments(<span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span><br><span class="line">     <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">       <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">       timeout = setTimeout(later, wait);</span><br><span class="line">       <span class="keyword">if</span> (callNow) result = func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       timeout = _.delay(later, wait, <span class="keyword">this</span>, args);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   debounced.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     clearTimeout(timeout);</span><br><span class="line">     timeout = <span class="literal">null</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> debounced;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>在限定时间内，如果事件再次触发，忽略事件响应，当到达时间后函数执行后再开始事件响应</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    wait = wait || <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.apply(that, args);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>_.debounce</span><a href="https://github.com/jashkenas/underscore/blob/master/underscore.js" target="_blank" rel="noopener">Underscore.js</a></figcaption><table><tr><td class="code"><pre><span class="line">_.throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout, context, args, result;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _.now();</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      result = func.apply(context, args);</span><br><span class="line">      <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> throttled = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> now = _.now();</span><br><span class="line">      <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">      <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">      context = <span class="keyword">this</span>;</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">      <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">          clearTimeout(timeout);</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        previous = now;</span><br><span class="line">        result = func.apply(context, args);</span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">        timeout = setTimeout(later, remaining);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    throttled.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearTimeout(timeout);</span><br><span class="line">      previous = <span class="number">0</span>;</span><br><span class="line">      timeout = context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> throttled;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>frontend</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
